// api/get-bot-token/index.js - SECURED VERSION
const { validateMSALToken } = require('../shared/jwt-validation');

module.exports = async function (context, req) {
    if (req.method !== 'POST') {
        context.res = { status: 405, body: { message: 'Method not allowed' } };
        return;
    }

    try {
        // SECURITY FIX: Validate JWT token instead of trusting email from body
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            context.res = { 
                status: 401, 
                body: { message: 'Authorization header required' } 
            };
            return;
        }

        let userToken;
        try {
            userToken = await validateMSALToken(authHeader);
        } catch (error) {
            context.log.error('Token validation failed:', error.message);
            context.res = { 
                status: 401, 
                body: { message: 'Invalid or expired token' } 
            };
            return;
        }

        const email = userToken.email;
        context.log('Getting bot token for authenticated user:', email);

        // Use your fixed DirectLine secret to generate user-specific tokens
        const directLineSecret = process.env.DIRECT_LINE_SECRET;
        
        if (!directLineSecret) {
            context.log.error('DirectLine secret not configured');
            context.res = {
                status: 500,
                body: { message: 'Service configuration error' }
            };
            return;
        }

        // Generate a user-specific DirectLine token using the DirectLine REST API
        const directLineResponse = await fetch('https://directline.botframework.com/v3/directline/tokens/generate', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${directLineSecret}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                // This creates user-specific conversations while using your fixed bot secret
                User: {
                    Id: userToken.oid || email, // Unique user identifier
                    Name: userToken.name || email.split('@')[0]
                },
                // Optional: Add trusted origins for additional security
                TrustedOrigins: process.env.ALLOWED_ORIGINS ? 
                    process.env.ALLOWED_ORIGINS.split(',') : undefined
            })
        });

        if (!directLineResponse.ok) {
            const errorText = await directLineResponse.text();
            context.log.error('DirectLine token generation failed:', directLineResponse.status, errorText);
            context.res = {
                status: 500,
                body: { message: 'Failed to generate bot token' }
            };
            return;
        }

        const directLineData = await directLineResponse.json();

        // Return the user-specific token
        context.res = {
            status: 200,
            body: {
                token: directLineData.token
                // Note: Don't return conversationId here as it will be generated by the client
            }
        };

    } catch (error) {
        context.log.error('Error getting bot token:', error);
        context.res = {
            status: 500,
            body: { message: 'Internal server error' }
        };
    }
};